>>> Unitialized late variable on cascade containing method chains.
main() {
  htmlElement
    ..style.width = '100%'
    ..style.height = '100%'
    ..classList.add(_kClassName);
}
<<<
main() {
  htmlElement
    ..style.width = '100%'
    ..style.height = '100%'
    ..classList.add(_kClassName);
}
>>>
### When a subtree is formatted separately, the mergeSubtree() step mostly has
### no effect because the subtree's cost and overflow doesn't affect the
### winning solution. But it sometimes does. None of the existing tests happen
### to hit a case that does, but when formatting a corpus with subtree merging
### on and off, this was a relatively simple example where the behavior differs.
class C {
  void paint(PaintingContext context, Offset offset) {
    final (double visualPosition, Color leftColor, Color rightColor) =
        switch (textDirection) {
          TextDirection.rtl => (
            1.0 - _position.value,
            _activeColor,
            trackColor,
          ),
          TextDirection.ltr => (_position.value, trackColor, _activeColor),
        };

    final double trackCenter = offset.dy + size.height / 2.0;
    final double trackLeft = offset.dx + _trackLeft;
  }
}
<<<
class C {
  void paint(PaintingContext context, Offset offset) {
    final (
      double visualPosition,
      Color leftColor,
      Color rightColor,
    ) = switch (textDirection) {
      TextDirection.rtl => (1.0 - _position.value, _activeColor, trackColor),
      TextDirection.ltr => (_position.value, trackColor, _activeColor),
    };

    final double trackCenter = offset.dy + size.height / 2.0;
    final double trackLeft = offset.dx + _trackLeft;
  }
}
>>> Eager argument list splitting shouldn't be too eager.
main() {
  Text('Item 1', style: TextStyle(color: Colors.white));
}
<<<
main() {
  Text('Item 1', style: TextStyle(color: Colors.white));
}
>>> Eager argument list splitting shouldn't be too eager.
main() {
  return Container(
    height: 70,
    child: Center(child: contents),
  );
}
<<<
main() {
  return Container(height: 70, child: Center(child: contents));
}
>>> Eager argument list splitting shouldn't be too eager.
main() {
  Stack(
    children: <Matcher>[
      matchesSemantics(label: 'inner'),
    ],
  );
}
<<<
main() {
  Stack(children: <Matcher>[matchesSemantics(label: 'inner')]);
}
>>> Eager argument list splitting shouldn't be too eager.
main() {
  Padding(
    padding: EdgeInsets.only(top: 20.zR),
  );
}
<<<
main() {
  Padding(padding: EdgeInsets.only(top: 20.zR));
}