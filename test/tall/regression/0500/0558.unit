>>>
class RouteDefinition {
  const factory RouteDefinition.fork(
    String path,
    List<RouteDefinition> children, {
    @required String defaultTo,
  }) = ForkedRouteDefinition._;
}
<<<
class RouteDefinition {
  const factory RouteDefinition.fork(
    String path,
    List<RouteDefinition> children, {
    @required String defaultTo,
  }) = ForkedRouteDefinition._;
}
>>>
class RouteDefinition {
  const factory RouteDefinition.fork(
    String path,
    List<RouteDefinition> children, {
    @Required('When `path` is navigated to, what path within `children` to use')
        String defaultTo,
  }) = ForkedRouteDefinition._;
}
<<<
class RouteDefinition {
  const factory RouteDefinition.fork(
    String path,
    List<RouteDefinition> children, {
    @Required('When `path` is navigated to, what path within `children` to use')
    String defaultTo,
  }) = ForkedRouteDefinition._;
}
>>>
void reallyLongFunctionName0(
    @Deprecated('This has been deprecated for many interesting reasons...')
        arg1) {
  return;
}

void fn1(
    {@Deprecated('This has been deprecated for many interesting reasons...')
        String argument1}) {
  return;
}
<<<
void reallyLongFunctionName0(
  @Deprecated('This has been deprecated for many interesting reasons...') arg1,
) {
  return;
}

void fn1({
  @Deprecated('This has been deprecated for many interesting reasons...')
  String argument1,
}) {
  return;
}
>>>
void reallyLongFunctionName0(
    @Deprecated('This has been deprecated for many many interesting reasons...')
        arg1) {
  return;
}

void fn1(
    {@Deprecated('This has been deprecated for many many interesting reasons...')
        String argument1}) {
  return;
}
<<<
void reallyLongFunctionName0(
  @Deprecated('This has been deprecated for many many interesting reasons...')
  arg1,
) {
  return;
}

void fn1({
  @Deprecated('This has been deprecated for many many interesting reasons...')
  String argument1,
}) {
  return;
}