>>> Large argument list with block formatting.
class C {
  Future<void> startServer({bool? ensureCleanBuild, List<String>? buildArgs}) =>
      _startServer(
        'dart',
        [
          '--packages=.dart_tool/package_config.json',
          p.join('..', 'build_runner', 'bin', 'build_runner.dart'),
          'serve',
          '--verbose',
          if (buildArgs != null) ...buildArgs,
        ],
        ensureCleanBuild: ensureCleanBuild,
      );
}
<<<
class C {
  Future<void> startServer({bool? ensureCleanBuild, List<String>? buildArgs}) =>
      _startServer('dart', [
        '--packages=.dart_tool/package_config.json',
        p.join('..', 'build_runner', 'bin', 'build_runner.dart'),
        'serve',
        '--verbose',
        if (buildArgs != null) ...buildArgs,
      ], ensureCleanBuild: ensureCleanBuild);
}
>>> Long method chain.
main() {
  var stdErrLines = proc.stderr.transform(utf8.decoder).transform(
    const LineSplitter(),
  ).asBroadcastStream();
}
<<<
### TODO(rnystrom): It would be nice if we could put the target of a split
### method chain on the same line as the assignment.
main() {
  var stdErrLines =
      proc.stderr
          .transform(utf8.decoder)
          .transform(const LineSplitter())
          .asBroadcastStream();
}
>>> Don't split return type if comment after metadata annotation.
class Benchmark {
  @override
  // A rate of one run per 2s, with a millisecond of noise.  Some variation is
  // needed for Golem's noise-based filtering and regression detection.
  double
  measure() => (2000 + Random().nextDouble() - 0.5) * 1000;
}
<<<
class Benchmark {
  @override
  // A rate of one run per 2s, with a millisecond of noise.  Some variation is
  // needed for Golem's noise-based filtering and regression detection.
  double measure() => (2000 + Random().nextDouble() - 0.5) * 1000;
}
>>>
class Uint8ClampedList {
  @patch
  factory Uint8ClampedList.fromList(List<int> elements) = NativeUint8ClampedList.fromList;
}
<<<
class Uint8ClampedList {
  @patch
  factory Uint8ClampedList.fromList(List<int> elements) =
      NativeUint8ClampedList.fromList;
}