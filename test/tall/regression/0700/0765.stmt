>>> (indent 6)
      final listViewChildren = <ChronologicalGroup>[
        ChronologicalGroup.today,
        ChronologicalGroup.thisWeek,
        ChronologicalGroup.thisMonth,
        ChronologicalGroup.lastMonth,
        ChronologicalGroup.later,
      ]
          .map((chronologicalGroup) => viewModel.jobs[chronologicalGroup])
          .where((jobsInChronologicalGroup) => jobsInChronologicalGroup != null)
          .expand((jobsInChronologicalGroup) {
        final header = ListTile(
          title: Text(
            _headerForChronologicalGroup(jobsInChronologicalGroup.first.chronologicalGroup),
            style: Theme.of(context).textTheme.title,
          ),
        );

        return <Widget>[header].followedBy(jobsInChronologicalGroup.map((job) => _JobView(job)));
      }).toList();
<<<
      final listViewChildren =
          <ChronologicalGroup>[
                ChronologicalGroup.today,
                ChronologicalGroup.thisWeek,
                ChronologicalGroup.thisMonth,
                ChronologicalGroup.lastMonth,
                ChronologicalGroup.later,
              ]
              .map((chronologicalGroup) => viewModel.jobs[chronologicalGroup])
              .where(
                (jobsInChronologicalGroup) => jobsInChronologicalGroup != null,
              )
              .expand((jobsInChronologicalGroup) {
                final header = ListTile(
                  title: Text(
                    _headerForChronologicalGroup(
                      jobsInChronologicalGroup.first.chronologicalGroup,
                    ),
                    style: Theme.of(context).textTheme.title,
                  ),
                );

                return <Widget>[header].followedBy(
                  jobsInChronologicalGroup.map((job) => _JobView(job)),
                );
              })
              .toList();
>>>
Stream<dynamic> refreshEpic(
    Stream<dynamic> actions, EpicStore<AppState> store) {
  return Observable(actions)
      .ofType(TypeToken<RefreshAction>())
      .switchMap(
    (action) {
      return Observable.just(RefreshSuccessAction())
          .delay(Duration(seconds: 2));
    },
  );
}
<<<
Stream<dynamic> refreshEpic(
  Stream<dynamic> actions,
  EpicStore<AppState> store,
) {
  return Observable(actions).ofType(TypeToken<RefreshAction>()).switchMap((
    action,
  ) {
    return Observable.just(RefreshSuccessAction()).delay(Duration(seconds: 2));
  });
}