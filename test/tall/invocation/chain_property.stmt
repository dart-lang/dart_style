40 columns                              |
### Tests special (or not) handling of properties in call chains.
>>> Don't split leading properties in a chain.
compiler.property.property.method().method().method();
<<<
compiler.property.property
    .method()
    .method()
    .method();
>>> Don't split leading properties even if other properties split.
compiler.property.method().property.method();
<<<
compiler.property
    .method()
    .property
    .method();
>>> Split properties after a method chain.
compiler.method().method().method().property.property;
<<<
compiler
    .method()
    .method()
    .method()
    .property
    .property;
>>> Split properties inside a method chain.
compiler.method().property.method().property.method();
<<<
compiler
    .method()
    .property
    .method()
    .property
    .method();
>>> Split all properties if any split.
avian.bovine.canine.equine.feline.piscine;
<<<
avian
    .bovine
    .canine
    .equine
    .feline
    .piscine;
>>> Split all leading properties if any split.
avian.bovine.canine.equine.feline.piscine.method();
<<<
avian
    .bovine
    .canine
    .equine
    .feline
    .piscine
    .method();
>>> Prefer splitting an assignment over splitting a pure property chain.
variable = avian.bovine.canine.equine.feline;
<<<
variable =
    avian.bovine.canine.equine.feline;
>>> Split the property chain if moving it to the next line still doesn't fit.
variable = avian.bovine.canine.equine.feline.galline;
<<<
variable = avian
    .bovine
    .canine
    .equine
    .feline
    .galline;
>>> Don't prefer splitting an assignment if there are methods in the chain.
variable = avian.bovine.canine.equine.feline();
<<<
variable = avian.bovine.canine.equine
    .feline();
>>> Don't prefer splitting an assignment if there are methods in the chain.
variable = avian.bovine().canine.equine().feline;
<<<
variable = avian
    .bovine()
    .canine
    .equine()
    .feline;
