40 columns                              |
>>> Block comment before first parameter.
Function(/* c */a,b) x;
<<<
Function(/* c */ a, b) x;
>>> Block comment before ",".
Function(a/* c */,b) x;
<<<
Function(a /* c */, b) x;
>>> Block comment after ",".
Function(a,/* c */b) x;
<<<
Function(a, /* c */ b) x;
>>> Block comment before "[".
Function(a /* c */, [b]) x;
<<<
Function(a /* c */, [b]) x;
>>> Block comment after "[".
Function([/* c */ arg]) x;
<<<
Function([/* c */ arg]) x;
>>> Block comment before "]".
Function([arg/* c */]) x;
<<<
Function([arg /* c */]) x;
>>> Block comment after "]".
Function([arg]/* c */) x;
<<<
Function([arg /* c */]) x;
>>> Block comment before "{".
Function(a,/* c */{int b}) x;
<<<
Function(a /* c */, {int b}) x;
>>> Block comment after "{".
Function({/* c */int arg}) x;
<<<
Function({/* c */ int arg}) x;
>>> Block comment before "}".
Function({int arg/* c */}) x;
<<<
Function({int arg /* c */}) x;
>>> Block comment after "{".
Function({int arg}/* c */) x;
<<<
Function({int arg /* c */}) x;
>>> Line comment before first parameter.
Function(// c
a,b) x;
<<<
Function(
  // c
  a,
  b,
) x;
>>> Line comment before ",".
Function(a// c
,b) x;
<<<
Function(
  a, // c
  b,
) x;
>>> Line comment after ",".
Function(a,// c
b) x;
<<<
Function(
  a, // c
  b,
) x;
>>> Line comment before "[".
Function(a,// c
[b]) x;
<<<
### Note: Moves comment after `[`.
Function(
  a, [ // c
  b,
]) x;
>>> Line comment after "[".
Function([// c
arg]) x;
<<<
Function([
  // c
  arg,
]) x;
>>> Line comment before "]".
Function([arg// c
]) x;
<<<
Function([
  arg, // c
]) x;
>>> Line comment after "]".
Function([arg]// c
) x;
<<<
Function([
  arg, // c
]) x;
>>> Line comment before "{".
Function(a,// c
{int b}) x;
<<<
Function(
  a, { // c
  int b,
}) x;
>>> Line comment after "{".
Function({// c
int arg}) x;
<<<
Function({
  // c
  int arg,
}) x;
>>> Line comment before "}".
Function({int arg// c
}) x;
<<<
Function({
  int arg, // c
}) x;
>>> Line comment after "{".
Function({int arg}// c
) x;
<<<
Function({
  int arg, // c
}) x;
>>> Comment before removed mandatory trailing comma.
Function(a/* c */,) x;
<<<
Function(a /* c */) x;
>>> Comment after removed mandatory trailing comma.
Function(a,/* c */) x;
<<<
Function(a /* c */) x;
>>> Comments before and after removed mandatory trailing comma.
Function(a/* c1 */,/* c2 */) x;
<<<
Function(a /* c1 */ /* c2 */) x;
>>> Comment at inserted mandatory trailing comma.
Function(veryLongParameterName/* c */) x;
<<<
Function(
  veryLongParameterName /* c */,
) x;
>>> Comment before removed optional trailing comma.
Function([a/* c */,]) x;
<<<
Function([a /* c */]) x;
>>> Comment after removed optional trailing comma.
Function([a,/* c */]) x;
<<<
Function([a /* c */]) x;
>>> Comments before and after removed optional trailing comma.
Function([a/* c1 */,/* c2 */]) x;
<<<
Function([a /* c1 */ /* c2 */]) x;
>>> Comment at inserted optional trailing comma.
Function([veryLongParameterName/* c */]) x;
<<<
Function([
  veryLongParameterName /* c */,
]) x;
>>> Comment before removed named trailing comma.
Function({int a/* c */,}) x;
<<<
Function({int a /* c */}) x;
>>> Comment after removed named trailing comma.
Function({int a,/* c */}) x;
<<<
Function({int a /* c */}) x;
>>> Comments before and after removed named trailing comma.
Function({int a/* c1 */,/* c2 */}) x;
<<<
Function({int a /* c1 */ /* c2 */}) x;
>>> Comment at inserted named trailing comma.
Function({int veryLongParameterName/* c */}) x;
<<<
Function({
  int veryLongParameterName /* c */,
}) x;
>>> Wrap inline block comment.
Function(/* a very long block comment */) x;
<<<
Function(
  /* a very long block comment */
) x;
>>> Before parameter.
Function(
    /* comment */ int a, int b, int c,
    [direction]) x;
<<<
Function(
  /* comment */ int a,
  int b,
  int c, [
  direction,
]) x;