40 columns                              |
### Test which kinds of expressions are candidates to be block-formatted.
>>> Non-empty block-bodied function expression.
function(() { body; });
<<<
function(() {
  body;
});
>>> Empty block-bodied function expression with a block comment.
function(() { /* fairly long comment */ });
<<<
function(() {
  /* fairly long comment */
});
>>> Empty block-bodied function expression with a line comment.
function(() { // comment
});
<<<
function(() {
  // comment
});
>>> Block-bodied function expression with parameters.
function((parameter) { body; });
<<<
function((parameter) {
  body;
});
>>> Empty block-bodied function expression with parameters is not a block argument.
function((parameter, anotherParameter) {});
<<<
function(
  (parameter, anotherParameter) {},
);
>>> Expression-bodied function expression with parameters is not a block argument.
function((parameter, anotherParameter) => body);
<<<
function(
  (parameter, anotherParameter) => body,
);
>>> Expression-bodied function expression with many parameters is not a block argument.
function((parameter, anotherParameter, thirdParameter) => body);
<<<
function(
  (
    parameter,
    anotherParameter,
    thirdParameter,
  ) => body,
);
>>> An empty block-bodied function expression is not a block argument.
function_________________________(() {});
<<<
function_________________________(
  () {},
);
>>> A zero-parameter expression-bodied function is not a block argument.
function_______________________(() => null);
<<<
function_______________________(
  () => null,
);
>>> Function call is not a block argument.
function(innerFunction(veryLongArgumentExpression));
<<<
function(
  innerFunction(
    veryLongArgumentExpression,
  ),
);
>>> A zero-argument function call with block comment is not a block argument.
function(innerFunction(/* long comment */));
<<<
function(
  innerFunction(/* long comment */),
);
>>> Zero-argument function call with line comment is not a block argument.
function(innerFunction(// comment
));
<<<
function(
  innerFunction(
    // comment
  ),
);
>>> A zero-argument function call is not a block argument.
function_______________________(inner());
<<<
function_______________________(
  inner(),
);
>>> A method call is not a block argument.
function(target.inner(veryLongArgumentExpression));
<<<
function(
  target.inner(
    veryLongArgumentExpression,
  ),
);
>>> A zero-argument method call with block comment is not a block argument.
function(target.inner(/* long comment */));
<<<
function(
  target.inner(/* long comment */),
);
>>> A zero-argument method call with line comment is not a block argument.
function(target.inner(// comment
));
<<<
function(
  target.inner(
    // comment
  ),
);
>>> A zero-argument method call is not a block argument.
function________________(target.inner());
<<<
function________________(
  target.inner(),
);
>>> An instance creation expression is not a block argument.
function(new SomeClass(veryLongArgumentExpression));
<<<
function(
  new SomeClass(
    veryLongArgumentExpression,
  ),
);
>>> A zero-argument instance creation expression with block comment is not a block argument.
function(new SomeClass(/* long comment */));
<<<
function(
  new SomeClass(/* long comment */),
);
>>> A zero-argument instance creation expression with line comment is not a block argument.
function(new SomeClass(// comment
));
<<<
function(
  new SomeClass(
    // comment
  ),
);
>>> A zero-argument instance creation expression is not a block argument.
function________________(new SomeClass());
<<<
function________________(
  new SomeClass(),
);
>>> Immediately invoked function.
function(() { body; }());
<<<
function(() {
  body;
}());
>>> Empty immediately invoked function with a block comment.
function(() { /* fairly long comment */ }());
<<<
function(() {
  /* fairly long comment */
}());
>>> Empty immediately invoked function with a line comment.
function(() { // comment
}());
<<<
function(() {
  // comment
}());
>>> Immediately invoked function with parameters and arguments.
function((p, r) { body; }(a, b));
<<<
function((p, r) {
  body;
}(a, b));
>>> Immediately invoked empty function with parameters is not a block argument.
function((parameter, anotherParameter) {}());
<<<
function(
  (parameter, anotherParameter) {}(),
);
>>> An empty immediately invoked function is not a block argument.
function_________________________(() {}());
<<<
function_________________________(
  () {}(),
);
>>> A function expression call is not a block argument.
function((expression)(veryLongArgumentExpression));
<<<
function(
  (expression)(
    veryLongArgumentExpression,
  ),
);
>>> A zero-argument function expression call with block comment is not a block argument.
function((expression)(/* long comment */));
<<<
function(
  (expression)(/* long comment */),
);
>>> A zero-argument function expression call with line comment is not a block argument.
function((expression)(// comment
));
<<<
function(
  (expression)(
    // comment
  ),
);
>>> A zero-argument function expression call is not a block argument.
function_______________________((expr)());
<<<
function_______________________(
  (expr)(),
);
>>> A parenthesized expression where inner expression is a block argument.
function(([element1, element2, element3]));
<<<
function(([
  element1,
  element2,
  element3,
]));
>>> List literal.
function([veryLongElement, anotherLongElement]);
<<<
function([
  veryLongElement,
  anotherLongElement,
]);
>>> Empty list literal with block comment.
function([/* a very long block comment */]);
<<<
function([
  /* a very long block comment */
]);
>>> Empty list literal with line comment.
function([// comment
]);
<<<
function([
  // comment
]);
>>> An empty list is not a block argument.
function_____________________________([]);
<<<
function_____________________________(
  [],
);
>>> Map literal.
function({1: veryLongElement, 2: anotherLongElement});
<<<
function({
  1: veryLongElement,
  2: anotherLongElement,
});
>>> Set literal.
function({veryLongElement, anotherLongElement});
<<<
function({
  veryLongElement,
  anotherLongElement,
});
>>> Empty set/map literal with block comment.
function({/* a very long block comment */});
<<<
function({
  /* a very long block comment */
});
>>> Empty set/map literal with line comment.
function({// comment
});
<<<
function({
  // comment
});
>>> An empty map/set is not a block argument.
function_____________________________({});
<<<
function_____________________________(
  {},
);
>>> Record literal.
function((veryLongElement, anotherLongElement));
<<<
function((
  veryLongElement,
  anotherLongElement,
));
>>> Empty record literal with block comment.
function((/* a very long block comment */));
<<<
function((
  /* a very long block comment */
));
>>> Empty record literal with line comment.
function((// comment
));
<<<
function((
  // comment
));
>>> An empty record is not a block argument.
function_____________________________(());
<<<
function_____________________________(
  (),
);
>>> Switch expression.
function(switch (n) {1 => veryLongElement, 2 => anotherLongElement});
<<<
function(switch (n) {
  1 => veryLongElement,
  2 => anotherLongElement,
});
>>> Empty switch expression with block comment.
function(switch (n) {/* long comment */});
<<<
function(switch (n) {
  /* long comment */
});
>>> Empty switch expression with line comment.
function(switch (n) {// comment
});
<<<
function(switch (n) {
  // comment
});
>>> An empty switch expression is not a block argument.
function___________________(switch (n) {});
<<<
function___________________(
  switch (n) {},
);