40 columns                              |
>>> Unsplit.
condition  ?  thenBranch  :  elseBranch  ;
<<<
condition ? thenBranch : elseBranch;
>>> Split because condition splits.
veryLongElement != otherReallyLongElement ? longArgument : arg;
<<<
veryLongElement !=
        otherReallyLongElement
    ? longArgument
    : arg;
>>> Split because of split in then branch.
condition ? veryLongExpression +
    otherLongExpression : elseExpr;
<<<
condition
    ? veryLongExpression +
          otherLongExpression
    : elseExpr;
>>> Split because of split in else branch.
condition ? thenExpression
    : veryLongExpression +
        otherLongExpression;
<<<
condition
    ? thenExpression
    : veryLongExpression +
          otherLongExpression;
>>> Force split all conditionals when nested.
var kind = a ? b ? c : d : e;
<<<
var kind = a
    ? b
          ? c
          : d
    : e;
>>>
var kind = a ? b : c ? d : e;
<<<
var kind = a
    ? b
    : c
    ? d
    : e;
>>> Don't force split conditionals when indirectly nested.
var kind = a ? b : (c ? d : e);
<<<
var kind = a ? b : (c ? d : e);
>>> Flatten a chain of else-if conditionals.
var kind = c1 ? e1 : c2 ? e2 : c3 ? e3 : c4 ? e4 : e5;
<<<
var kind = c1
    ? e1
    : c2
    ? e2
    : c3
    ? e3
    : c4
    ? e4
    : e5;
>>> Indent block-style then and else branches past the operators.
### Note that the condition does not get extra +2 indentation.
x = condition(argument1, argument2, argument3)
? thenBranch(argument1, argument2, argument3)
: elseBranch(argument1, argument2, argument3);
<<<
x =
    condition(
      argument1,
      argument2,
      argument3,
    )
    ? thenBranch(
        argument1,
        argument2,
        argument3,
      )
    : elseBranch(
        argument1,
        argument2,
        argument3,
      );
>>> Indent chained block-style then and else branches past the operators.
### Note that the condition does not get extra +2 indentation.
x = condition(argument1, argument2, argument3)
? thenBranch1(argument1, argument2, argument3)
: elseBranch1(argument1, argument2, argument3)
? thenBranch2(argument1, argument2, argument3)
: elseBranch2(argument1, argument2, argument3);
<<<
x =
    condition(
      argument1,
      argument2,
      argument3,
    )
    ? thenBranch1(
        argument1,
        argument2,
        argument3,
      )
    : elseBranch1(
        argument1,
        argument2,
        argument3,
      )
    ? thenBranch2(
        argument1,
        argument2,
        argument3,
      )
    : elseBranch2(
        argument1,
        argument2,
        argument3,
      );
>>> Indent expression-style then and else branches past the operators.
x = condition1 && condition2 && condition3
? thenBranch1 + thenBranch2 + thenBranch3
: elseBranch1 - elseBranch2 - elseBranch3;
<<<
x =
    condition1 &&
        condition2 &&
        condition3
    ? thenBranch1 +
          thenBranch2 +
          thenBranch3
    : elseBranch1 -
          elseBranch2 -
          elseBranch3;
>>> Indent chained expression-style then and else branches past the operators.
x = condition1 && condition2 && condition3
? thenBranch1 + thenBranch2 + thenBranch3
: elseBranch1 - elseBranch2 - elseBranch3
? thenBranch4 + thenBranch5 + thenBranch6
: elseBranch4 - elseBranch5 - elseBranch6;
<<<
x =
    condition1 &&
        condition2 &&
        condition3
    ? thenBranch1 +
          thenBranch2 +
          thenBranch3
    : elseBranch1 -
          elseBranch2 -
          elseBranch3
    ? thenBranch4 +
          thenBranch5 +
          thenBranch6
    : elseBranch4 -
          elseBranch5 -
          elseBranch6;